<?php
/**
 * Configuration Generator Class
 *
 * @package AS_PHP_Checkup
 * @since 1.2.0
 */

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * AS_PHP_Checkup_Config_Generator class
 *
 * @since 1.2.0
 */
class AS_PHP_Checkup_Config_Generator {

	/**
	 * Instance of this class
	 *
	 * @since 1.2.0
	 * @var AS_PHP_Checkup_Config_Generator|null
	 */
	private static $instance = null;

	/**
	 * Constructor
	 *
	 * @since 1.2.0
	 */
	private function __construct() {
		// Constructor logic if needed
	}

	/**
	 * Get singleton instance
	 *
	 * @since 1.2.0
	 * @return AS_PHP_Checkup_Config_Generator
	 */
	public static function get_instance() {
		if ( null === self::$instance ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Generate PHP.ini content
	 *
	 * @since 1.2.0
	 * @param array $issues Current issues.
	 * @return string
	 */
	public function generate_php_ini( $issues ) {
		$checkup = AS_PHP_Checkup::get_instance();
		$recommended = $checkup->get_recommended_settings();
		
		$content = "; PHP Configuration generated by AS PHP Checkup\n";
		$content .= "; Generated: " . date( 'Y-m-d H:i:s' ) . "\n";
		$content .= "; Site: " . get_site_url() . "\n\n";
		
		// Basic settings
		$content .= "; Basic PHP Settings\n";
		if ( isset( $issues['memory_limit'] ) || isset( $recommended['basic']['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "memory_limit = {$value}\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) || isset( $recommended['basic']['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "max_input_vars = {$value}\n";
		}
		
		if ( isset( $issues['post_max_size'] ) || isset( $recommended['basic']['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "post_max_size = {$value}\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) || isset( $recommended['basic']['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "upload_max_filesize = {$value}\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) || isset( $recommended['basic']['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "max_execution_time = {$value}\n";
		}
		
		if ( isset( $issues['max_input_time'] ) || isset( $recommended['basic']['max_input_time'] ) ) {
			$value = $recommended['basic']['max_input_time']['recommended'];
			$content .= "max_input_time = {$value}\n";
		}
		
		$content .= "\n";
		
		// Session settings
		if ( isset( $recommended['session'] ) ) {
			$content .= "; Session Settings\n";
			foreach ( $recommended['session'] as $key => $setting ) {
				if ( isset( $issues[ $key ] ) ) {
					$content .= "{$key} = {$setting['recommended']}\n";
				}
			}
			$content .= "\n";
		}
		
		// OPcache settings
		if ( isset( $recommended['opcache'] ) ) {
			$has_opcache_issues = false;
			foreach ( $recommended['opcache'] as $key => $setting ) {
				if ( isset( $issues[ $key ] ) ) {
					$has_opcache_issues = true;
					break;
				}
			}
			
			if ( $has_opcache_issues ) {
				$content .= "; OPcache Settings\n";
				foreach ( $recommended['opcache'] as $key => $setting ) {
					if ( isset( $issues[ $key ] ) ) {
						$content .= "{$key} = {$setting['recommended']}\n";
					}
				}
				$content .= "\n";
			}
		}
		
		// Performance settings
		if ( isset( $recommended['performance'] ) ) {
			$has_perf_issues = false;
			foreach ( $recommended['performance'] as $key => $setting ) {
				if ( isset( $issues[ $key ] ) ) {
					$has_perf_issues = true;
					break;
				}
			}
			
			if ( $has_perf_issues ) {
				$content .= "; Performance Settings\n";
				foreach ( $recommended['performance'] as $key => $setting ) {
					if ( isset( $issues[ $key ] ) ) {
						$value = $setting['recommended'];
						if ( 'boolean_string' === $setting['type'] && 'On' === $value ) {
							$value = 1;
						}
						$content .= "{$key} = {$value}\n";
					}
				}
				$content .= "\n";
			}
		}
		
		// Additional recommended settings
		$content .= "; Additional Recommended Settings\n";
		$content .= "display_errors = Off\n";
		$content .= "log_errors = On\n";
		$content .= "error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT\n";
		$content .= "file_uploads = On\n";
		$content .= "allow_url_fopen = On\n";
		$content .= "date.timezone = \"" . get_option( 'timezone_string', 'UTC' ) . "\"\n";
		
		return $content;
	}

	/**
	 * Generate .htaccess directives
	 *
	 * @since 1.2.0
	 * @param array $issues Current issues.
	 * @return string
	 */
	public function generate_htaccess_directives( $issues ) {
		$checkup = AS_PHP_Checkup::get_instance();
		$recommended = $checkup->get_recommended_settings();
		
		$content = "# BEGIN AS PHP Checkup\n";
		$content .= "# PHP Configuration Directives\n";
		$content .= "# Generated: " . date( 'Y-m-d H:i:s' ) . "\n\n";
		
		// PHP Value directives
		$content .= "<IfModule mod_php7.c>\n";
		
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "  php_value memory_limit {$value}\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "  php_value max_input_vars {$value}\n";
		}
		
		if ( isset( $issues['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "  php_value post_max_size {$value}\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "  php_value upload_max_filesize {$value}\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "  php_value max_execution_time {$value}\n";
		}
		
		if ( isset( $issues['max_input_time'] ) ) {
			$value = $recommended['basic']['max_input_time']['recommended'];
			$content .= "  php_value max_input_time {$value}\n";
		}
		
		$content .= "</IfModule>\n\n";
		
		// PHP 8 directives
		$content .= "<IfModule mod_php.c>\n";
		
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "  php_value memory_limit {$value}\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "  php_value max_input_vars {$value}\n";
		}
		
		if ( isset( $issues['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "  php_value post_max_size {$value}\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "  php_value upload_max_filesize {$value}\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "  php_value max_execution_time {$value}\n";
		}
		
		if ( isset( $issues['max_input_time'] ) ) {
			$value = $recommended['basic']['max_input_time']['recommended'];
			$content .= "  php_value max_input_time {$value}\n";
		}
		
		$content .= "</IfModule>\n\n";
		
		// LiteSpeed directives
		$content .= "<IfModule lsapi_module>\n";
		
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "  php_value memory_limit {$value}\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "  php_value max_input_vars {$value}\n";
		}
		
		if ( isset( $issues['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "  php_value post_max_size {$value}\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "  php_value upload_max_filesize {$value}\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "  php_value max_execution_time {$value}\n";
		}
		
		if ( isset( $issues['max_input_time'] ) ) {
			$value = $recommended['basic']['max_input_time']['recommended'];
			$content .= "  php_value max_input_time {$value}\n";
		}
		
		$content .= "</IfModule>\n";
		
		$content .= "# END AS PHP Checkup";
		
		return $content;
	}

	/**
	 * Generate NGINX configuration
	 *
	 * @since 1.2.0
	 * @param array $issues Current issues.
	 * @return string
	 */
	public function generate_nginx_config( $issues ) {
		$checkup = AS_PHP_Checkup::get_instance();
		$recommended = $checkup->get_recommended_settings();
		
		$content = "# NGINX PHP Configuration\n";
		$content .= "# Generated by AS PHP Checkup\n";
		$content .= "# Date: " . date( 'Y-m-d H:i:s' ) . "\n\n";
		
		$content .= "# Add these directives to your NGINX server block or PHP location block\n";
		$content .= "# Usually in /etc/nginx/sites-available/your-site.conf\n\n";
		
		$content .= "location ~ \\.php$ {\n";
		$content .= "    # PHP-FPM Configuration\n";
		$content .= "    include fastcgi_params;\n";
		$content .= "    fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;\n";
		$content .= "    fastcgi_index index.php;\n";
		$content .= "    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;\n\n";
		
		$content .= "    # PHP Value Overrides\n";
		
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "    fastcgi_param PHP_VALUE \"memory_limit={$value}\";\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "    fastcgi_param PHP_VALUE \"max_input_vars={$value}\";\n";
		}
		
		if ( isset( $issues['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "    fastcgi_param PHP_VALUE \"post_max_size={$value}\";\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "    fastcgi_param PHP_VALUE \"upload_max_filesize={$value}\";\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "    fastcgi_param PHP_VALUE \"max_execution_time={$value}\";\n";
		}
		
		$content .= "\n    # Timeout settings\n";
		$content .= "    fastcgi_connect_timeout 300s;\n";
		$content .= "    fastcgi_send_timeout 300s;\n";
		$content .= "    fastcgi_read_timeout 300s;\n";
		$content .= "}\n\n";
		
		$content .= "# Client Body Size (for file uploads)\n";
		if ( isset( $issues['post_max_size'] ) || isset( $issues['upload_max_filesize'] ) ) {
			$upload_size = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "client_max_body_size {$upload_size};\n\n";
		}
		
		$content .= "# PHP-FPM Pool Configuration\n";
		$content .= "# Add these to your PHP-FPM pool config (usually /etc/php/8.3/fpm/pool.d/www.conf)\n";
		$content .= "# Or create a custom pool file for your site\n\n";
		
		$content .= "; Pool Directives\n";
		
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "php_admin_value[memory_limit] = {$value}\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "php_admin_value[max_input_vars] = {$value}\n";
		}
		
		if ( isset( $issues['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "php_admin_value[post_max_size] = {$value}\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "php_admin_value[upload_max_filesize] = {$value}\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "php_admin_value[max_execution_time] = {$value}\n";
		}
		
		if ( isset( $issues['max_input_time'] ) ) {
			$value = $recommended['basic']['max_input_time']['recommended'];
			$content .= "php_admin_value[max_input_time] = {$value}\n";
		}
		
		// OPcache settings for FPM
		$content .= "\n; OPcache Settings\n";
		foreach ( $recommended['opcache'] as $key => $setting ) {
			if ( isset( $issues[ $key ] ) ) {
				$content .= "php_admin_value[{$key}] = {$setting['recommended']}\n";
			}
		}
		
		$content .= "\n# After making changes:\n";
		$content .= "# 1. Test NGINX configuration: nginx -t\n";
		$content .= "# 2. Reload NGINX: systemctl reload nginx\n";
		$content .= "# 3. Restart PHP-FPM: systemctl restart php8.3-fpm\n";
		
		return $content;
	}

	/**
	 * Generate wp-config.php constants
	 *
	 * @since 1.2.0
	 * @param array $issues Current issues.
	 * @return array
	 */
	public function generate_wp_config_constants( $issues ) {
		$checkup = AS_PHP_Checkup::get_instance();
		$recommended = $checkup->get_recommended_settings();
		
		$constants = array();
		
		// Memory limit
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$constants['WP_MEMORY_LIMIT'] = $value;
			$constants['WP_MAX_MEMORY_LIMIT'] = $value;
		}
		
		// Additional performance constants
		if ( ! defined( 'WP_CACHE' ) ) {
			$constants['WP_CACHE'] = 'true';
		}
		
		if ( ! defined( 'COMPRESS_CSS' ) ) {
			$constants['COMPRESS_CSS'] = 'true';
		}
		
		if ( ! defined( 'COMPRESS_SCRIPTS' ) ) {
			$constants['COMPRESS_SCRIPTS'] = 'true';
		}
		
		if ( ! defined( 'CONCATENATE_SCRIPTS' ) ) {
			$constants['CONCATENATE_SCRIPTS'] = 'false';
		}
		
		// Autosave interval
		if ( ! defined( 'AUTOSAVE_INTERVAL' ) ) {
			$constants['AUTOSAVE_INTERVAL'] = '300';
		}
		
		// Post revisions
		if ( ! defined( 'WP_POST_REVISIONS' ) ) {
			$constants['WP_POST_REVISIONS'] = '10';
		}
		
		return $constants;
	}

	/**
	 * Generate Docker Compose configuration
	 *
	 * @since 1.2.0
	 * @param array $issues Current issues.
	 * @return string
	 */
	public function generate_docker_compose( $issues ) {
		$checkup = AS_PHP_Checkup::get_instance();
		$recommended = $checkup->get_recommended_settings();
		
		$content = "# Docker Compose PHP Configuration\n";
		$content .= "# Generated by AS PHP Checkup\n";
		$content .= "# Date: " . date( 'Y-m-d H:i:s' ) . "\n\n";
		
		$content .= "version: '3.8'\n\n";
		$content .= "services:\n";
		$content .= "  wordpress:\n";
		$content .= "    image: wordpress:php8.3-fpm\n";
		$content .= "    environment:\n";
		
		// PHP ini settings via environment
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "      - PHP_MEMORY_LIMIT={$value}\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "      - PHP_MAX_INPUT_VARS={$value}\n";
		}
		
		if ( isset( $issues['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "      - PHP_POST_MAX_SIZE={$value}\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "      - PHP_UPLOAD_MAX_FILESIZE={$value}\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "      - PHP_MAX_EXECUTION_TIME={$value}\n";
		}
		
		$content .= "    volumes:\n";
		$content .= "      - ./php.ini:/usr/local/etc/php/conf.d/custom.ini:ro\n";
		$content .= "      - ./wordpress:/var/www/html\n\n";
		
		$content .= "  nginx:\n";
		$content .= "    image: nginx:alpine\n";
		$content .= "    ports:\n";
		$content .= "      - \"80:80\"\n";
		$content .= "    volumes:\n";
		$content .= "      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro\n";
		$content .= "      - ./wordpress:/var/www/html\n";
		$content .= "    depends_on:\n";
		$content .= "      - wordpress\n";
		
		return $content;
	}

	/**
	 * Generate Kubernetes ConfigMap
	 *
	 * @since 1.2.0
	 * @param array $issues Current issues.
	 * @return string
	 */
	public function generate_kubernetes_configmap( $issues ) {
		$checkup = AS_PHP_Checkup::get_instance();
		$recommended = $checkup->get_recommended_settings();
		
		$content = "# Kubernetes ConfigMap for PHP Configuration\n";
		$content .= "# Generated by AS PHP Checkup\n";
		$content .= "# Date: " . date( 'Y-m-d H:i:s' ) . "\n\n";
		
		$content .= "apiVersion: v1\n";
		$content .= "kind: ConfigMap\n";
		$content .= "metadata:\n";
		$content .= "  name: php-config\n";
		$content .= "  namespace: wordpress\n";
		$content .= "data:\n";
		$content .= "  custom.ini: |\n";
		
		// PHP settings
		if ( isset( $issues['memory_limit'] ) ) {
			$value = $recommended['basic']['memory_limit']['recommended'];
			$content .= "    memory_limit = {$value}\n";
		}
		
		if ( isset( $issues['max_input_vars'] ) ) {
			$value = $recommended['basic']['max_input_vars']['recommended'];
			$content .= "    max_input_vars = {$value}\n";
		}
		
		if ( isset( $issues['post_max_size'] ) ) {
			$value = $recommended['basic']['post_max_size']['recommended'];
			$content .= "    post_max_size = {$value}\n";
		}
		
		if ( isset( $issues['upload_max_filesize'] ) ) {
			$value = $recommended['basic']['upload_max_filesize']['recommended'];
			$content .= "    upload_max_filesize = {$value}\n";
		}
		
		if ( isset( $issues['max_execution_time'] ) ) {
			$value = $recommended['basic']['max_execution_time']['recommended'];
			$content .= "    max_execution_time = {$value}\n";
		}
		
		if ( isset( $issues['max_input_time'] ) ) {
			$value = $recommended['basic']['max_input_time']['recommended'];
			$content .= "    max_input_time = {$value}\n";
		}
		
		// OPcache settings
		foreach ( $recommended['opcache'] as $key => $setting ) {
			if ( isset( $issues[ $key ] ) ) {
				$content .= "    {$key} = {$setting['recommended']}\n";
			}
		}
		
		$content .= "\n---\n\n";
		$content .= "# Use this ConfigMap in your WordPress Deployment:\n";
		$content .= "# volumeMounts:\n";
		$content .= "#   - name: php-config\n";
		$content .= "#     mountPath: /usr/local/etc/php/conf.d/custom.ini\n";
		$content .= "#     subPath: custom.ini\n";
		$content .= "# volumes:\n";
		$content .= "#   - name: php-config\n";
		$content .= "#     configMap:\n";
		$content .= "#       name: php-config\n";
		
		return $content;
	}
}